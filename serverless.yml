service:
  name: api-services

# Add the serverless-webpack plugin
plugins:
  - serverless-webpack

provider:
  name: aws
  runtime: nodejs6.10
  stage: ${opt:stage, self:custom.aws_stage}
  environment:
    AK_API_URL: ${env:AK_API_URL}
    AK_PASSWORD: ${env:AK_PASSWORD}
    AK_USERNAME: ${env:AK_USERNAME}
    BRAINTREE_ENV: ${env:BRAINTREE_ENV, 'Sandbox'}
    BRAINTREE_MERCHANT_ID: ${env:BRAINTREE_MERCHANT_ID}
    BRAINTREE_PRIVATE_KEY: ${env:BRAINTREE_PRIVATE_KEY}
    BRAINTREE_PUBLIC_KEY: ${env:BRAINTREE_PUBLIC_KEY}
    GOCARDLESS_ENV: ${env:GOCARDLESS_ENV, 'sandbox'}
    GOCARDLESS_TOKEN: ${env:GOCARDLESS_TOKEN}

functions:
  members-list:
    handler: members-service/members.index
    events:
      - http:
          method: GET
          path: members
          cors: true
  members-show:
    handler: members-service/members.show
    events:
      - http:
          method: GET
          path: members/{id}
          cors: true
  members-update:
    handler: members-service/members.update
    events:
      - http:
          method: POST
          path: members/{id}
          cors: true
  members-unsubscribe:
    handler: members-service/members.unsubscribe
    events:
      - http:
          method: POST
          path: members/{id}/unsubscribe
          cors: true
  subscriptions-list:
    handler: payments-service/subscription.index
    events:
      - http:
          method: get
          path: subscription
          cors: true
  braintree-token:
    handler: payments-service/providers/braintree/token.handler
    events:
      - http:
          method: get
          path: braintree/token
          cors: true

custom:
  # Use the AWS_STAGE env var if you don't want to manually override the stage
  # via the command line. So, instead of:
  #
  #  $ sls deploy -s stageName -f functionName
  #  $ sls invoke -s stageName -f functionName
  #  $ sls logs -s stageName -f functionName
  #
  # You can set the stage in your env, and it will be picked up by sls:
  #
  #  $ export AWS_STAGE=stageName
  #  $ sls deploy -f functionName
  #  $ sls invoke -f functionName
  #  $ sls logs -f functionName
  #
  # If you don't set a stage, it will default to 'dev'
  aws_stage: ${env:AWS_STAGE, 'dev'}